AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  task-reminder

  Schedule Email Reminders

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
  Application:
    Type: String
    Default: task-reminder
  Environment:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
    Default: dev

Globals:
  Function:
    Timeout: 3
    Handler: app.lambda_handler
    Runtime: python3.9
    Architectures:
      - x86_64

Resources:
  BaseDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: base-dependencies-layer
      Description: Base layer for task reminder(Contains updated boto3 library)
      ContentUri: base/
      RetentionPolicy: Retain
  SchedulerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: scheduler/
      Events:
        Schedule:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /schedule
            Method: post
      Environment:
        Variables:
          SEND_REMINDER_FUNCTION: !GetAtt SendReminderFunction.Arn
          INVOKE_LAMBDA_SCHEDULER_ROLE: !GetAtt InvokeLambdaSchedulerRole.Arn
      Policies:
        - Statement:
            - Sid: CreateEventSchedulePolicy
              Effect: Allow
              Action:
                - scheduler:CreateSchedule
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt InvokeLambdaSchedulerRole.Arn
      Layers:
        - !Ref BaseDependenciesLayer

  InvokeLambdaSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: invoke-lambda-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SendReminderFunction.Arn

  SendReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_reminder/
      Environment:
        Variables:
          TASK_REMINDER_TOPIC: !Ref TaskReminderTopic
          TASK_QUEUE: !Ref TasksQueue

  TasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${Application}-${Environment}-tasks

  TaskReminderTopic:
    Type: AWS::SNS::Topic

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Scheduler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/schedule/"
  SchedulerFunction:
    Description: "Scheduler Lambda Function ARN"
    Value: !GetAtt SchedulerFunction.Arn
  SchedulerFunctionIamRole:
    Description: "Implicit IAM Role created for Serverless function"
    Value: !GetAtt SchedulerFunctionRole.Arn
